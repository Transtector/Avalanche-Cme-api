# This docker is used to run the cme application API layer.
#
# Requires the cme binary Python wheels are built into
# /wheelhouse folder in the dockerfile context.
#
# Note:  In order to support calling system commands
# like 'shutdown', 'ntpq', 'reboot', etc, this docker
# requires a script to be running on the docker HOST
# that is listening for these commands.  Generally,
# for a production CME system, this script is launched
# by the Cme-init system and looks something like this:
#
#	$ ./cme-docker-fifo.sh &
#
# This sets up the input and output FIFO's and listens
# for system call requests coming from the container
# over the input FIFO.
#
# The cme API layer also needs some extra attention
# when running inside a docker container.  These
# command-line switches ensure that the API layer
# has access to required system resources:
#
#	$ docker run \
#		--rm \
#		--net=host \
#		--privileged \
#		--name cme \
#		-v /data:/data \
#       -v /etc/network:/etc/network \
#		-v /etc/ntp.conf:/etc/ntp.conf \
#		-v /etc/localtime:/etc/localtime \
#		-v /tmp/cmehostinput:/tmp/cmehostinput \
#		-v /tmp/cmehostoutput:/tmp/cmehostoutput \
#		-v /media/usb:/media/usb \
#		[<private_docker_registry>:5000/]cme

# Uses our base bare-bones Alpine Linux and Python 3.5
FROM base-alpine-python3

MAINTAINER James Brunner <james.brunner@smithsmicrowave.com>

# cme also requires rrdtool be installed
RUN apk --update add rrdtool && \
	rm /var/cache/apk/*

# Application wheels should be built into wheelhouse folder
COPY wheelhouse wheelhouse/

# Copy an entrypoint script and the cme-host-output monitor
COPY cme-entrypoint cme-entrypoint

# Install cme app using pip and built wheels
RUN pip install --no-index -f wheelhouse cme

# Run the cme application using an entrypoint script 
ENTRYPOINT ["./cme-entrypoint"]

CMD ["cme"]