# This docker is used to run the cme application API layer.
#
# Requires the cme binary Python wheels are built into
# /wheelhouse folder in the dockerfile context.
#
# The cme application layer needs some extra attention
# to implement API commands that affect the host system.
# In particular, networking, time, and system reboot
# calls are required.
#
# Mostly this is accommodated via switches when the docker
# container is run:
#
#	$ docker run --rm \
#		--net="host" \
#		--privileged \
#		--name cme \
#		-v /data:/data \
#       -v /etc/network:/etc/network \
#		-v /etc/ntp.conf:/etc/ntp.conf \
#		-v /etc/localtime:/etc/localtime \
#		-v /tmp/cmehostinput:/tmp/cmehostinput \
#		-v /tmp/cmehostoutput:/tmp/cmehostoutput \
#		-v /media/usb:/media/usb \
#		cme
#
# Note: you _must_ run the host command FIFO listener
# before running this container! Like this:
#
#	$ ./cme-host-input &
#
# This sets up the input and output FIFO's and listens
# for system call requests coming from the container
# over the input FIFO.

# Uses our base bare-bones Alpine Linux and Python 3.5
FROM base-alpine-python3

MAINTAINER James Brunner <james.brunner@smithsmicrowave.com>

# cme also requires rrdtool be installed
RUN apk --update add rrdtool && \
	rm /var/cache/apk/*

# Application wheels should be built into wheelhouse folder
COPY wheelhouse wheelhouse/

# Copy an entrypoint script and the cme-host-output monitor
COPY cme-entrypoint cme-entrypoint

# Install cme app using pip and built wheels
RUN pip install --no-index -f wheelhouse cme

# Run the cme application using an entrypoint script 
ENTRYPOINT ["./cme-entrypoint"]

CMD ["cme"]