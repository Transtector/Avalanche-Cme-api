#!/bin/bash

# ___ CREDITS
# Based on work found in https://github.com/aweijnitz/pi_backup

# This script used to create a gzipped image file from a raw partition.
# Ostensibly used to create the "system" image from a base "recovery" partition.

# Requirements:
# 	Run as root - use `sudo cme_img_creator`
#   pv installed (used to display progress during image file creation; sudo apt-get install pv)

#   CME eMMC partitions:
#			/dev/mmcblk0p1  "boot" partition, mounted at /boot
#			/dev/mmcblk0p2	"recovery" partition, mounted at /; this script runs from this partion!
#			/dev/mmcblk0p3  "data" partition, mounted at /data; this is where the image will be written
#			/dev/mmcblk0p4  "system" partiion, mounted at /system; not used in this script

# ======================== CHANGE THESE VALUES ========================

function stopServices {
	echo -e "${purple}${bold}Stopping services before imaging${NC}${normal}" | tee -a $DEST/$LOG
		service cme stop
		service avahi-daemon stop
		service netatalk stop
		service cron stop
		#service ssh stop
}

function startServices {
	echo -e "${purple}${bold}Starting the stopped services${NC}${normal}" | tee -a $DEST/$LOG
		#service ssh start
		service cron start
		service netatalk start
		service avahi-daemon start
		service cme start
}


# Setting up directories; DEST must be a mounted partition at /data
SRC=/dev/mmcblk0p2
DEST=/data
LOG=img_creator.log

# Part number for the (released) firmware image
PN=1500-002

# Revsion (major.minor.patch)
REV=0.1.0

# Image filename follows a specific convention:
#		1500-ABC-vX.Y.Z-SWARE-CME.img.gz
#
# 1500 : part number prefix for "software" category
# ABC : 3-digit sequentially assigned part number (e.g., "002")
# X.Y.Z : major.minor.patch software version string (see semver.org)
# SWARE : human-readable subcategory (e.g., "FIRMWARE", "SOFTWARE", "DRIVER", etc.)
# CME : human-readable product name or designation
FILE=${PN}-v${REV}-SWARE-CME.img.gz

# =====================================================================

# Setting up echo fonts
red='\e[0;31m'
green='\e[0;32m'
cyan='\e[0;36m'
yellow='\e[1;33m'
purple='\e[0;35m'
NC='\e[0m' # No Color
bold=`tput bold`
normal=`tput sgr0`

# Check for root user else exit
if [[ $UID != 0 ]]; then
    echo -e "${red}${bold}You must be root to execute this script; Aborting!${NC}${normal}"
    exit 1
fi

# Check if mount point is mounted, if not abort!
if ! mountpoint -q "$DEST" ; then
		echo -e "${yellow}${bold}$DEST is not mounted; Aborting!${NC}${normal}"
		exit 1
fi

# Remove previous log if present
if [ -f "$DEST/$LOG" ]; then
	echo -e "${yellow}${bold}Removing previous log.${NC}${normal}"
	rm -f $DEST/$LOG
fi

echo -e "${green}${bold}Starting CME partition imaging process!${NC}${normal}" | tee -a $DEST/$LOG

# Create a filename with datestamp for our current image
OFILE="$DEST/$FILE"

# First sync disks
sync; sync

# Shut down some services before starting
stopServices

echo "____ IMAGING BEGIN $(date +%Y/%m/%d_%H:%M:%S)" | tee -a $DEST/$LOG
SECONDS=0

# Begin imaging, should take about 45 minutes hour from 8Gb SD card to HDD
echo -e "${green}${bold}Imaging and gzipping $SRC to $DEST ${NC}${normal}" | tee -a $DEST/$LOG
SDSIZE=`blockdev --getsize64 $SRC`;
pv -tpreb $SRC -s $SDSIZE | dd  bs=1M conv=sync,noerror iflag=fullblock | gzip > $OFILE

# Wait for DD to finish and catch result
SUCCESS=$?
DURATION=$SECONDS

echo "____ IMAGING END $(date +%Y/%m/%d_%H:%M:%S) $(($DURATION / 60))m $(($DURATION % 60))s" | tee -a $DEST/$LOG

# Start services again that where shutdown before backup process
startServices

# If command has completed successfully, create MD5 checksum and exit
if [ $SUCCESS =  0 ];
then
		echo -e "${green}${bold}Imaging process completed! FILE: $OFILE${NC}${normal}" | tee -a $DEST/$LOG
		echo "____ generating md5sum for $OFILE" | tee -a $DEST/$LOG
		MD5SUM=`md5sum $OFILE`
		echo "${green}${bold}Saving md5sum $MD5SUM to file${NC}${normal}" | tee -a $DEST/$LOG
		echo $MD5SUM >> $OFILE.md5
		exit 0
else 
		# Else remove attempted image file
		 echo -e "${red}${bold}Imaging failed!${NC}${normal}" | tee -a $DEST/$LOG
		 rm -f $OFILE
		 exit 1
fi
